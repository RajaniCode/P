mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py

polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py


# mysite/settings.py, set TIME_ZONE to your time zone.

# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

# Django-app-2
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Kolkata'


# mysite/settings.py INSTALLED_APPS default apps:
• django.contrib.admin – The admin site. You’ll use it shortly.
• django.contrib.auth – An authentication system.
• django.contrib.contenttypes – A framework for content types.
• django.contrib.sessions – A session framework.
• django.contrib.messages – A messaging framework.
• django.contrib.staticfiles – A framework for managing static files.


# The default apps make use of database table, so create the tables in the database
$ python manage.py migrate

# Note: Use sqlite shell in separate command prompt
-- Tables before python manage.py migrate:
sqlite> SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;
django_migrations
sqlite_sequence

-- Tables after python manage.py migrate:
sqlite> SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;
auth_group
auth_group_permissions
auth_permission
auth_user
auth_user_groups
auth_user_user_permissions #
django_admin_log # 
django_content_type #
django_session #
django_migrations
sqlite_sequence


# Show Migrations
$ python manage.py showmigrations --list
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial


# Django models – database layout with additional metadata
# A model contains the essential fields and behaviors of the data
# DRY Principle: Define data model in one place and automatically derive things from it.
# Unlike in Ruby On Rails, migrations are entirely derived from models file, and are a history that Django can roll through to update database schema to match current models

# polls/models.py
from __future__ import unicode_literals
# Django-app-2
from django.db import models
class Question(models.model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
class Choice(models.model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)


# Tell project the polls app is installed
# Django apps are "pluggable" in multiple projects

# mysite/settings.py
INSTALLED_APPS = [
    # Django-app-2
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


# Tell Django the changes to models (and thus database schema) and the changes to be stored as a migration
# Migrations are files on disk - polls/migrations/0001_initial.py
$ python manage.py makemigrations polls
Migrations for 'polls':
  polls\migrations\0001_initial.py:
    - Create model Choice
    - Create model Question
    - Add field question to choice


# Show Migrations
$ python manage.py showmigrations --list
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
polls
 [ ] 0001_initial
sessions
 [X] 0001_initial


# See what SQL that migration would run
$ python manage.py sqlmigrate polls 0001
BEGIN;
--
-- Create model Choice
--
CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL);
--
-- Create model Question
--
CREATE TABLE "polls_question" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "question_text" varchar(200) NOT NULL, "pub_date" datetime NOT
--
-- Add field question to choice
--
ALTER TABLE "polls_choice" RENAME TO "polls_choice__old";
CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "q
er NOT NULL REFERENCES "polls_question" ("id"));
INSERT INTO "polls_choice" ("choice_text", "votes", "id", "question_id") SELECT "choice_text", "votes", "id", NULL FROM "polls_choice__old";
DROP TABLE "polls_choice__old";
CREATE INDEX "polls_choice_7aa0f6ee" ON "polls_choice" ("question_id");
COMMIT;

-- Tables before "Apply all migrations" - python manage.py migrate:
$ sqlite3 db.sqlite3
sqlite> .tables
auth_group                  auth_user_user_permissions
auth_group_permissions      django_admin_log
auth_permission             django_content_type
auth_user                   django_migrations
auth_user_groups            django_session
sqlite>


# Optional check for any problems in project without making migrations or touching the database
# python manage.py check
System check identified no issues (0 silenced).


# Migrate again to create the model tables in database
$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, polls, sessions
Running migrations:
  Rendering model states... DONE
  Applying polls.0001_initial... OK


-- Tables after python manage.py migrate:
sqlite> .tables
auth_group                  django_admin_log
auth_group_permissions      django_content_type
auth_permission             django_migrations
auth_user                   django_session
auth_user_groups            polls_choice   #
auth_user_user_permissions  polls_question #
sqlite>


 
# Playing with the API and sqlite # Without python manage.py runserver # Django shell
# Bypassing manage.py
# Run python from the same directory manage.py
$ python manage.py shell
>>> import django
>>> django.setup()

# Playing with the API and sqlite # Without python manage.py runserver # Python shell
# Bypassing manage.py
# Run python from the same directory manage.py
$ python
>>> import os
>>> import sys
>>> os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")
>>> import django
>>> django.setup()

>>> from polls.models import Question, Choice
>>> Question.objects.all()
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())
>>> q.save()
>>> q.id
>>> q.question_text
>>> q.pub_date
>>> q.question_text = "What's up?"
>>> q.save()
>>> Question.objects.all()

# Note 
>>> Question.objects.all()
>>> q.question_text = "What's up?"
>>> q.save()
>>> Question.objects.filter(question_text__startswith='What')
# SELECT * FROM polls_question WHERE question_text LIKE 'What%'
>>> Question.objects.extra(where={"question_text LIKE 'What%'"})
>>> text = "What''s up?"
>>> query = "question_text = \'{0}\'".format(text)
>>> query
>>> Question.objects.extra(where={query})

# Edit Question model 
polls/models.py
from __future__ import unicode_literals
# Django-app-2
import datetime
from django.db import models
from django.utils import timezone
from django.utils.encoding import python_2_unicode_compatible
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
    # @python_2_unicode_compatible # only if you need to support Python 2
    def __str__(self):
        return self.question_text    
class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    # @python_2_unicode_compatible # only if you need to support Python 2
    def __str__(self):
        return self.choice_text

>>> from polls.models import Question, Choice
>>> Question.objects.all()
>>> Question.objects.filter(id=1)
>>> Question.objects.filter(question_text__startswith='What')
>>> from django.utils import timezone
>>> Question.objects.get(pub_date__year=timezone.now().year)
>>> Question.objects.get(id=2) # Traceback (most recent call last): ... DoesNotExist: Question matching query does not exist.
>>> Question.objects.get(pk=1)
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
>>> q.choice_set.all()
>>> q.choice_set.create(choice_text='Not much', votes=0)
>>> q.choice_set.create(choice_text='The sky', votes=0)
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
>>> c.question
>>> q.choice_set.all()
>>> q.choice_set.count()
>>> Choice.objects.filter(question__pub_date__year=current_year)
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()


# Django Admin
# Creating an admin user
$ python manage.py createsuperuser
Username (leave blank to use 'aspire'): admin
Email address: admin@example.com
Password: <python2.7>
Password (again): <python2.7>

sqlite> .open db.sqlite3
sqlite> .tables
auth_group                  django_admin_log
auth_group_permissions      django_content_type
auth_permission             django_migrations
auth_user                   django_session
auth_user_groups            polls_choice
auth_user_user_permissions  polls_question
sqlite> SELECT * FROM auth_user;
1|pbkdf2_sha256$30000$TyP8qjt81GsQ$lmYak10tg2qBKCk+9AblWY9+D9ltXFeGBWVLCJe+uYs=|2016-08-10 08:23:45.166000|1|||admin@example.com|1|1|2016-08-10 08:20:58.332000|
admin
sqlite>


# Start the development server
python manage.py runserver

http://127.0.0.1:8000/admin/


# Make the poll app modifiable in the admin
# Tell the admin that Question objects have an admin interface
# polls/admin.py
from django.contrib import admin
# Django-app-2
from .models import Question
admin.site.register(Question)




# Note
# app
from django.db import models
from django.utils import timezone
# from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible
# @python_2_unicode_compatible # only if you need to support Python 2
import datetime
from polls.models import Question, Choice

# shell
import os
import sys
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")
import django
django.setup()

# admin
from django.contrib import admin
from .models import Question