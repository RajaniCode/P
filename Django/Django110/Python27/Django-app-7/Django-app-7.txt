# Customize admin form
# Reorder the fields on the edit form
# Follow the pattern – create a model admin class, then pass it as the second argument to admin.site.register()
# polls/admin.py
from django.contrib import admin
from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']
admin.site.register(Question, QuestionAdmin)

http://127.0.0.1:8000/admin/polls/question/1/change/


# fieldsets
# split the form up into fieldsets
# The first element of each tuple in fieldsets is the title of the fieldset
# polls/admin.py
from django.contrib import admin
from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
        ]
admin.site.register(Question, QuestionAdmin)

http://127.0.0.1:8000/admin/polls/question/1/change/


# Add Choice objects
# Question has multiple Choices
# register Choice with the admin
# for "Choices" to be an available option in the Django admin
# polls/admin.py
admin.site.register(Choice)

http://127.0.0.1:8000/admin/polls/choice/add/

# Note
# "Question" field is a select box containing every question in the database
# Django knows that a ForeignKey should be represented in the admin as a <select> box
# "Add Another" link next to "Question.", every object with a ForeignKey relationship to another gets this for free
# If you add a question in that window and click "Save", Django will save the question to the database and dynamically add it as the selected choice on the "Add choice" form
# However, this is an inefficient way of adding Choice objects to the system
# It'd be better if you could add a bunch of Choices directly when you create the Question object


# Remove the register() call for the Choice model 
# Edit the Question registration code
# Choice objects are edited on the Question admin page
# By default, provide enough fields for 3 choices
# polls/admin.py
from django.contrib import admin
from .models import Choice, Question
class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]
admin.site.register(Question, QuestionAdmin)

http://127.0.0.1:8000/admin/polls/question/add/

# Note
# There are three slots for related Choices – as specified by extra


# TabularInline 
# Django offers a tabular way of displaying inline related objects - TabularInline (instead of StackedInline) in class ChoiceInlin
# polls/admin.py
class ChoiceInline(admin.TablularInline):

http://127.0.0.1:8000/admin/polls/question/add/

# Note that there is an extra "Delete?" column that allows removing rows added using the "Add Another Choice" button and rows that have already been saved


# Customize admin change list

# By default, Django displays the str() of each object
# list_display (tuple of field names to display) admin option as columns
# polls/admin.py
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')

http://127.0.0.1:8000/admin/polls/question/

# Note 
# Sort column headers except was_published_recently (because sorting by the output of an arbitrary method is not supported)


# Attributes for Question Model method was_published_recently
# polls/models.py
class Question(models.Model):
    # ...
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'


# Add filters using list_filter
# polls/admin.py
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_filter = ['pub_date']

http://127.0.0.1:8000/admin/polls/question/

# Note
# "Filter" sidebar to filter the change list by the pub_date field
# Because pub_date is a DateTimeField, filter options are: "Any date", "Today", "Past 7 days", "This month", "This year"


# Add  search capability using search_fields
# polls/admin.py
class QuestionAdmin(admin.ModelAdmin):
    # ...
    search_fields = ['question_text']

http://127.0.0.1:8000/admin/polls/question/

# Note
# search box at the top of the change list
# uses LIKE query behind the scenes
# change lists give you free pagination, the default is to display 100 items per page
# change list pagination, search boxes, filters, date-hierarchies, and column-header-ordering all work together


# Customize admin look and feel
# Customize project's templates
# add DIRS option in TEMPLATES
# DIRS is a list of filesystem directories to check when loading Django templates; it's a search path
# 'DIRS': [os.path.join(BASE_DIR, 'templates')],
# mysite/settings.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


$ mkdir "polls/templates/admin"
mysite>copy "C:\Python27\Lib\site-packages\django\contrib\admin\templates\admin\base_site.html" "polls\templates\admin\base_site.html"

#  Django source files
$ python -c "import django; print(django.__path__)"

replace 
{{ site_header|default:_('Django administration') }}
with
Polls Administration
# polls/templates/admin/base_site.html
{% block branding %}
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
{% endblock %}

http://127.0.0.1:8000/admin/

# Note
# Django administration changed to Polls Administration
# Django's default admin templates is overridden
# Actually, django.contrib.admin.AdminSite.site_header attribute would be used to make this particular customization
# {% and {{ tags are part of Django's template language


# Customizing application's templates
# If DIRS was empty by default, how was Django finding the default admin templates?
# Since APP_DIRS is set to True, Django automatically looks for a templates/ subdirectory within each application package, for use as a fallback (note that django.contrib.admin is an application)


# Customize admin index page
# By default, it displays all the apps in INSTALLED_APPS that have been registered with the admin application, in alphabetical order
mysite>copy "C:\Python27\Lib\site-packages\django\contrib\admin\templates\admin\index.html" "polls\templates\admin\index.html"

# The Definitive Guide to Django Web Development Done Right
On a similar note, you might want to customize the look and feel of the Django admin index page. 
By default, it displays all available applications, according to your INSTALLED_APPS setting, sorted by the name of the application. 
You might, however, want to change this order to make it easier to find the applications you're looking for. 
After all, the index is probably the most important page of the admin interface, so it should be easy to use.

The template to customize is admin/index.html. 
(Remember to copy admin/index.html to your custom template directory as in the previous example.) 
Edit the file, and you'll see it uses a template tag called {% get_admin_app_list as app_list %}. 
This tag retrieves every installed Django application. 
Instead of using the tag, you can hard-code links to object-specific admin pages in whatever way you think is best. 
If hard-coding links doesn't appeal to you, see Chapter 10 for details on implementing your own template tags.

Django offers another shortcut in this department. 
Run the command python manage.py adminindex <app> to get a chunk of template code for inclusion in the admin index template. 
It's a useful starting point.

For full details on customizing the look and feel of the Django admin site in general, see Chapter 17.




# Admin Recent actions
# SELECT * FROM django_admin_log
http://127.0.0.1:8000/admin/




# Note
from django.contrib import admin
from .models import Question, Choice