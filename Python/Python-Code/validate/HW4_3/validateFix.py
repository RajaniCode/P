import base64
code='''
CmltcG9ydCBweW1vbmdvCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmltcG9ydCBzdHJpbmcKaW1wb3J0IHN5cwppbXBvcnQgZ2V0b3B0CmltcG9ydCBwcHJpbnQKCiMgQ29weXJpZ2h0IDIwMTIKIyAxMGdlbiwgSW5jLgojIEF1dGhvcjogQW5kcmV3IEVybGljaHNvbiAgIGFqZUAxMGdlbi5jb20KIwojIElmIHlvdSBhcmUgYSBzdHVkZW50IGFuZCByZWFkaW5nIHRoaXMgY29kZSwgdHVybiBiYWNrIG5vdywgYmVmb3JlCiMgdGhlIE1vbmdvREIgZ29kcyBzbWl0ZSB5b3UuCgpjb25uZWN0aW9uID0gTm9uZQpkYiA9IE5vbmUKd2ViaG9zdCA9ICJsb2NhbGhvc3Q6ODA4MiIKbW9uZ29zdHIgPSAibW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNyIKZGJfbmFtZSA9ICJibG9nIgoKIyB0aGlzIHNjcmlwdCB3aWxsIGNoZWNrIHRoYXQgaG9tZXdvcmsgNC4zCgojIGNvbW1hbmQgbGluZSBhcmcgcGFyc2luZyB0byBtYWtlIGZvbGtzIGhhcHB5IHdobyB3YW50IHRvIHJ1biBhdCBtb25nb2xhYnMgb3IgbW9uZ29ocQojIHRoaXMgZnVuY3Rpb25zIHVzZXMgZ2xvYmFsIHZhcnMgdG8gY29tbXVuaWNhdGUuIGZvcmdpdmUgbWUuCmRlZiBhcmdfcGFyc2luZyhhcmd2KToKCiAgICBnbG9iYWwgd2ViaG9zdAogICAgZ2xvYmFsIG1vbmdvc3RyCiAgICBnbG9iYWwgZGJfbmFtZQoKICAgIHRyeToKICAgICAgICBvcHRzLCBhcmdzID0gZ2V0b3B0LmdldG9wdChhcmd2LCAiLXA6LW06LWQ6IikKICAgIGV4Y2VwdCBnZXRvcHQuR2V0b3B0RXJyb3I6CiAgICAgICAgcHJpbnQgInVzYWdlIHZhbGlkYXRlLnB5IC1wIHdlYmhvc3QgLW0gbW9uZ29Db25uZWN0U3RyaW5nIC1kIGRhdGFiYXNlTmFtZSIKICAgICAgICBwcmludCAiCW1vbmdvQ29ubmVjdGlvblN0cmluZyBkZWZhdWx0IHRvIHswfSIuZm9ybWF0KG1vbmdvc3RyKQogICAgICAgIHByaW50ICIJZGF0YWJhc2VOYW1lIGRlZmF1bHRzIHRvIHswfSIuZm9ybWF0KGRiX25hbWUpCiAgICAgICAgc3lzLmV4aXQoMikKICAgIGZvciBvcHQsIGFyZyBpbiBvcHRzOgogICAgICAgIGlmIChvcHQgPT0gJy1oJyk6CiAgICAgICAgICAgIHByaW50ICJ1c2FnZSB2YWxpZGF0ZS5weSAtbSBtb25nb0Nvbm5lY3RTdHJpbmcgLWQgZGF0YWJhc2VOYW1lIgogICAgICAgICAgICBzeXMuZXhpdCgyKQogICAgICAgIGVsaWYgb3B0IGluICgiLW0iKToKICAgICAgICAgICAgbW9uZ29zdHIgPSBhcmcKICAgICAgICAgICAgcHJpbnQgIk92ZXJyaWRpbmcgTW9uZ29EQiBjb25uZWN0aW9uIHN0cmluZyB0byBiZSAiLCBtb25nb3N0cgogICAgICAgIGVsaWYgb3B0IGluICgiLWQiKToKICAgICAgICAgICAgZGJfbmFtZSA9IGFyZwogICAgICAgICAgICBwcmludCAiT3ZlcnJpZGluZyBNb25nb0RCIGRhdGFiYXNlIHRvIGJlICIsIGRiX25hbWUKCiMgY2hlY2sgdG8gc2VlIGlmIHRoZXkgbG9hZGVkIHRoZSBkYXRhIHNldApkZWYgY2hlY2tfZm9yX2RhdGFfaW50ZWdyaXR5KCk6CgogICAgcG9zdHMgPSBkYi5wb3N0cwogICAgdHJ5OgogICAgICAgIGNvdW50ID0gcG9zdHMuY291bnQoKQogICAgZXhjZXB0OgogICAgICAgIHByaW50ICJjYW4ndCBxdWVyeSBNb25nb0RCLi5pcyBpdCBydW5uaW5nPyIKICAgICAgICByYWlzZQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGlmIChjb3VudCAhPSAxMDAwKToKICAgICAgICBwcmludCAiVGhlcmUgYXJlIHN1cHBvc2VkIHRvIGJlIDEwMDAgZG9jdW1lbnRzLiB5b3UgaGF2ZSAiLCBjb3VudAogICAgICAgIHJldHVybiBGYWxzZQoKICAgICMgZmluZCB0aGUgbW9zdCBwb3B1bGFyIHRhZ3MKICAgIHRyeToKCiAgICAgICAgcmVzdWx0ID0gZGIucG9zdHMuYWdncmVnYXRlKFt7JyRwcm9qZWN0Jzp7J3RhZ3MnOjF9fSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JyR1bndpbmQnOickdGFncyd9LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnJGdyb3VwJzp7J19pZCc6ICckdGFncycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6eyckc3VtJzoxfX19LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnJHNvcnQnOnsnY291bnQnOi0xfX0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyckbGltaXQnOjEwfV0pCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQgImNhbid0IHF1ZXJ5IE1vbmdvREIuLmlzIGl0IHJ1bm5pbmc/IgogICAgICAgIHJhaXNlCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICBmb3VuZCA9IEZhbHNlCgogICAgI3ByaW50IHJlc3VsdFsncmVzdWx0J11bMF1bJ2NvdW50J10KICAgICNwcmludCByZXN1bHRbJ3Jlc3VsdCddWzBdWydfaWQnXQogICAgCiAgICBpZiAocmVzdWx0WydyZXN1bHQnXVswXVsnY291bnQnXSAhPSAxMyBvcgogICAgICAgIHJlc3VsdFsncmVzdWx0J11bMF1bJ19pZCddICE9ICJlbGJvdyIpOgogICAgICAgIGZvdW5kID0gVHJ1ZQogICAgI2ZvciBpdGVtIGluIHJlc3VsdDoKICAgICAgICAjcHJpbnQgaXRlbQogICAgICAgICNpZiAoaXRlbVsnY291bnQnXSA9PSAxMyBhbmQgCiAgICAgICAgICAgICNpdGVtWydfaWQnXSA9PSAic3BoeW54Iik6CiAgICAgICAgICAgICNmb3VuZCA9IFRydWUKCiAgICBpZiBub3QgZm91bmQ6CiAgICAgICAgcHJpbnQgIlRoZSBkYXRhc2V0IGlzIG5vdCBwcm9wZXJseSBsb2FkZWQuIFRoZSBkaXN0cmlidXRpb24gb2YgcG9zdCB0YWdzIGlzIHdyb25nLiIKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBwcmludCAiRGF0YSBsb29rcyBsaWtlIGl0IGlzIHByb3Blcmx5IGxvYWRlZCBpbnRvIHRoZSBwb3N0cyBjb2xsZWN0aW9uIgoKICAgIHJldHVybiBUcnVlCiAgICAKCmRlZiBjaGVja19mb3JfZmFzdF9ibG9nX2hvbWVfcGFnZSgpOgoKICAgIHBvc3RzID0gZGIucG9zdHMKCiAgICB0cnk6CiAgICAgICAgZXhwbGFpbiA9IHBvc3RzLmZpbmQoKS5zb3J0KCdkYXRlJywgZGlyZWN0aW9uPS0xKS5saW1pdCgxMCkuZXhwbGFpbigpCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQgImNhbid0IHF1ZXJ5IE1vbmdvREIuLmlzIGl0IHJ1bm5pbmc/IgogICAgICAgIHJhaXNlCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgaWYgKGV4cGxhaW5bJ2V4ZWN1dGlvblN0YXRzJ11bJ3RvdGFsRG9jc0V4YW1pbmVkJ10gPiAxMCk6CiAgICAgICAgcHJpbnQgIlNvcnJ5LCBleGVjdXRpbmcgdGhlIHF1ZXJ5IHRvIGRpc3BsYXkgdGhlIGhvbWUgcGFnZSBpcyB0b28gc2xvdy4gIgogICAgICAgIHByaW50ICJXZSBzaG91bGQgYmUgc2Nhbm5pbmcgbm8gbW9yZSB0aGFuIDEwIGRvY3VtZW50cy4gWW91IHNjYW5uZWQiLCBleHBsYWluWydleGVjdXRpb25TdGF0cyddWyd0b3RhbERvY3NFeGFtaW5lZCddCiAgICAgICAgcHJpbnQgImhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIGV4cGxhaW4iCgogICAgICAgIHBwID0gcHByaW50LlByZXR0eVByaW50ZXIoZGVwdGg9NikKICAgICAgICBwcC5wcHJpbnQoZXhwbGFpbikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgcHJpbnQgIkhvbWUgcGFnZSBpcyBzdXBlciBmYXN0LiBOaWNlIGpvYi4iCiAgICByZXR1cm4gVHJ1ZQoKZGVmIGdldF90aGVfbWlkZGxlX3Blcm1hbGluaygpOgogICAgcG9zdHMgPSBkYi5wb3N0cwogICAgdHJ5OgogICAgICAgIGMgPSBwb3N0cy5maW5kKCkuc2tpcCg1MDApLmxpbWl0KDEpCiAgICAgICAgZm9yIGRvYyBpbiBjOgogICAgICAgICAgICBwZXJtYWxpbmsgPSBkb2NbJ3Blcm1hbGluayddCiAgICAgICAgICAgIHJldHVybiBwZXJtYWxpbmsKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCAiY2FuJ3QgcXVlcnkgTW9uZ29EQi4uaXMgaXQgcnVubmluZz8iCiAgICAgICAgcmFpc2UKICAgIHJldHVybiAiIgoKZGVmIGNoZWNrX2Zvcl9mYXN0X2Jsb2dfZW50cnlfcGFnZSgpOgogICAgCiAgICBwb3N0cyA9IGRiLnBvc3RzCgogICAgcGVybWFsaW5rID0gZ2V0X3RoZV9taWRkbGVfcGVybWFsaW5rKCkKICAgIHRyeToKICAgICAgICBleHBsYWluID0gcG9zdHMuZmluZCh7J3Blcm1hbGluayc6cGVybWFsaW5rfSkuZXhwbGFpbigpCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQgImNhbid0IHF1ZXJ5IE1vbmdvREIuLmlzIGl0IHJ1bm5pbmc/IgogICAgICAgIHJhaXNlCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgaWYgKGV4cGxhaW5bJ2V4ZWN1dGlvblN0YXRzJ11bJ3RvdGFsRG9jc0V4YW1pbmVkJ10gPiAxKToKICAgICAgICBwcmludCAiU29ycnksIGV4ZWN1dGluZyB0aGUgcXVlcnkgdG8gcmV0cmlldmUgYSBwb3N0IGJ5IHBlcm1hbGluayBpcyB0b28gc2xvdyAiCiAgICAgICAgcHJpbnQgIldlIHNob3VsZCBiZSBzY2FubmluZyBubyBtb3JlIHRoYW4gMSBkb2N1bWVudHMuIFlvdSBzY2FubmVkIiwgZXhwbGFpblsnZXhlY3V0aW9uU3RhdHMnXVsndG90YWxEb2NzRXhhbWluZWQnXQogICAgICAgIHByaW50ICJoZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSBleHBsYWluIgoKICAgICAgICBwcCA9IHBwcmludC5QcmV0dHlQcmludGVyKGRlcHRoPTYpCiAgICAgICAgcHAucHByaW50KGV4cGxhaW4pCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIHByaW50ICJCbG9nIHJldHJpZXZhbCBieSBwZXJtYWxpbmsgaXMgc3VwZXIgZmFzdC4gTmljZSBqb2IuIgogICAgcmV0dXJuIFRydWUKCgpkZWYgY2hlY2tfZm9yX2Zhc3RfcG9zdHNfYnlfdGFnX3BhZ2UoKToKICAgIHBvc3RzID0gZGIucG9zdHMKCiAgICB0YWcgPSAic3BoeW54IgogICAgdHJ5OgogICAgICAgIGV4cGxhaW4gPSBwb3N0cy5maW5kKHsndGFncyc6dGFnfSkuc29ydCgnZGF0ZScsIGRpcmVjdGlvbj0tMSkubGltaXQoMTApLmV4cGxhaW4oKQogICAgZXhjZXB0OgogICAgICAgIHByaW50ICJjYW4ndCBxdWVyeSBNb25nb0RCLi5pcyBpdCBydW5uaW5nPyIKICAgICAgICByYWlzZQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGlmIChleHBsYWluWydleGVjdXRpb25TdGF0cyddWyd0b3RhbERvY3NFeGFtaW5lZCddID4gMTApOgogICAgICAgIHByaW50ICJTb3JyeSwgZXhlY3V0aW5nIHRoZSBxdWVyeSB0byByZXRyaWV2ZSBwb3N0cyBieSB0YWcgaXMgdG9vIHNsb3cuIgogICAgICAgIHByaW50ICJXZSBzaG91bGQgYmUgc2Nhbm5pbmcgbm8gbW9yZSB0aGFuIDEwIGRvY3VtZW50cy4gWW91IHNjYW5uZWQiLCBleHBsYWluWydleGVjdXRpb25TdGF0cyddWyd0b3RhbERvY3NFeGFtaW5lZCddCiAgICAgICAgcHJpbnQgImhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIGV4cGxhaW4iCgogICAgICAgIHBwID0gcHByaW50LlByZXR0eVByaW50ZXIoZGVwdGg9NikKICAgICAgICBwcC5wcHJpbnQoZXhwbGFpbikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgcHJpbnQgIkJsb2cgcmV0cmlldmFsIGJ5IHRhZyBpcyBzdXBlciBmYXN0LiBOaWNlIGpvYi4iCiAgICByZXR1cm4gVHJ1ZQoKCiMgbWFpbiBzZWN0aW9uIG9mIHRoZSBjb2RlCmRlZiBtYWluKGFyZ3YpOgogICAgICAgICAgICAKICAgIGFyZ19wYXJzaW5nKGFyZ3YpCiAgICBnbG9iYWwgY29ubmVjdGlvbgogICAgZ2xvYmFsIGRiCgogICAgcHJpbnQgIldlbGNvbWUgdG8gdGhlIEhXIDQuMyBDaGVja2VyLiBNeSBqb2IgaXMgdG8gbWFrZSBzdXJlIHlvdSBhZGRlZCB0aGUgaW5kZXhlcyIKICAgIHByaW50ICJ0aGF0IG1ha2UgdGhlIGJsb2cgZmFzdCBpbiB0aGUgZm9sbG93aW5nIHRocmVlIHNpdHVhdGlvbnMiCiAgICBwcmludCAiCVdoZW4gc2hvd2luZyB0aGUgaG9tZSBwYWdlIgogICAgcHJpbnQgIglXaGVuIGZldGNoaW5nIGEgcGFydGljdWxhciBwb3N0IgogICAgcHJpbnQgIglXaGVuIHNob3dpbmcgYWxsIHBvc3RzIGZvciBhIHBhcnRpY3VsYXIgdGFnIgoKICAgICMgY29ubmVjdCB0byB0aGUgZGIgKG1vbmdvc3RyIHdhcyBzZXQgaW4gYXJnX3BhcnNpbmcpCiAgICB0cnk6CiAgICAgICAgY29ubmVjdGlvbiA9IHB5bW9uZ28uTW9uZ29DbGllbnQobW9uZ29zdHIpCiAgICAgICAgZGIgPSBjb25uZWN0aW9uW2RiX25hbWVdCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQgImNhbid0IGNvbm5lY3QgdG8gTW9uZ29EQiB1c2luZyIsIG1vbmdvc3RyLCAiLiBJcyBpdCBydW5uaW5nPyIKICAgICAgICBwcmludCAiRXhjZXB0aW9uIHdhcyIsIGUKICAgICAgICBzeXMuZXhpdCgxKQogICAgICAgIAogICAgaWYgKG5vdCBjaGVja19mb3JfZGF0YV9pbnRlZ3JpdHkoKSk6CiAgICAgICAgcHJpbnQgIlNvcnJ5LCB0aGUgZGF0YSBzZXQgaXMgbm90IGxvYWRlZCBjb3JyZWN0bHkgaW4gdGhlIHBvc3RzIGNvbGxlY3Rpb24iCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBpZiAobm90IGNoZWNrX2Zvcl9mYXN0X2Jsb2dfaG9tZV9wYWdlKCkpOgogICAgICAgIHByaW50ICJTb3JyeSwgdGhlIHF1ZXJ5IHRvIGRpc3BsYXkgdGhlIGJsb2cgaG9tZSBwYWdlIGlzIHRvbyBzbG93LiIKICAgICAgICBzeXMuZXhpdCgxKQoKICAgIGlmIChub3QgY2hlY2tfZm9yX2Zhc3RfYmxvZ19lbnRyeV9wYWdlKCkpOgogICAgICAgIHByaW50ICJTb3JyeSwgdGhlIHF1ZXJ5IHRvIHJldHJpZXZlIGEgYmxvZyBwb3N0IGJ5IHBlcm1hbGluayBpcyB0b28gc2xvdy4iCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBpZiAobm90IGNoZWNrX2Zvcl9mYXN0X3Bvc3RzX2J5X3RhZ19wYWdlKCkpOgogICAgICAgIHByaW50ICJTb3JyeSwgdGhlIHF1ZXJ5IHRvIHJldHJpZXZlIGFsbCBwb3N0cyB3aXRoIGEgY2VydGFpbiB0YWcgaXMgdG9vIHNsb3ciCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIAogICAgIyBpZiB5b3UgYXJlIHJlYWRpbmcgdGhpcyBpbiBjbGVhcnRleHQsIHlvdSBhcmUgdmlvbGF0aW5nIHRoZSBob25vciBjb2RlLgogICAgIyBZb3UgY2FuIHN0aWxsIHJlZGVlbSB5b3Vyc2VsZi4gR2V0IGl0IHdvcmtpbmcgYW5kIGRvbid0IHN1Ym1pdCB0aGUgdmFsaWRhdGlvbiBjb2RlIHVudGlsIHlvdSBkby4KICAgICMgQWxsIGEgbWFuIGhhcyBhdCB0aGUgZW5kIG9mIHRoZSBkYXkgaXMgaGlzIHdvcmQuCiAgICBwcmludCAiVGVzdHMgUGFzc2VkIGZvciBIVyA0LjMuIFlvdXIgSFcgNC4zIHZhbGlkYXRpb24gY29kZSBpcyA4OTNqZm5zMjlmNzI4Zm4yOWYyMGYyIgoKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbihzeXMuYXJndlsxOl0pCg==
'''
eval(compile(base64.b64decode(code), "<string>", 'exec'))
